PROJECTNAME=particle_test
SRC_ROOT=..
IS_LIBRARY_PROJECT=0
OWN_HEADER_PATH=.
DEPEND_ON=



# {
# YS Standard Makefile Header for Unix and MacOSX 20140801 >>
#
# Variable PROJECTNAME and SRC_ROOT must be defined before the header.
#

# Self-memo: $* $> $@ etc are officially (?) called 'automatic variables'
# Self-memo: $(lastword $(MAKEFILE_LIST)) will give the current makefile name


# Identifying compiler >>
# Priority is given to clang over g++
TESTCLANG:=$(shell which clang 1> /dev/null; echo $$?)
TESTGPP:=$(shell which g++ 1> /dev/null; echo $$?)

ifeq ($(TESTCLANG),0)
CC=clang
else ifeq ($(TESTGPP),0)
CC=g++
else
$(error C++ Compiler not found.)
endif
# Identifying compiler >>


RM=rm
MD=mkdir
CP=cp
INCOPT=-I
LIBPREFIX=lib
LIBEXT=.a
CPPFLAGS=-std=c++0x
MAKEEXE=make
C_OPTION_AVAILABLE=1
SLASH=/
CHAIN=;

BITNESSTESTSRC=ysbitnesstest.cpp
BITNESSTESTEXE=ysbitnesstest

ifndef PROJECTNAME
$(error Variable PROJECTNAME not defined.)
endif
ifndef SRC_ROOT
$(error Variable SRC_ROOT not defined.)
endif
ifndef IS_LIBRARY_PROJECT
$(error Variable IS_LIBRARY_PROJECT not defined.)
endif


ifndef YS_BITNESS
GENSRC:=$(shell echo 'int main(void){printf("%d",8*(int)sizeof(void *));return 0;} ' 1> $(BITNESSTESTSRC))
BITNESSCOMPILE:=$(shell g++ $(BITNESSTESTSRC) -o $(BITNESSTESTEXE) -include stdio.h)
SIZEOFPOINTER:=$(shell ./$(BITNESSTESTEXE))
YS_BITNESS:=$(SIZEOFPOINTER)
CLEANTEMPORARYCPP:=$(shell rm $(BITNESSTESTSRC) $(BITNESSTESTEXE))
endif

ifeq ($(YS_BITNESS),32)
  CBITNESSFLAG=-m32
else
  ifeq ($(YS_BITNESS),64)
    CBITNESSFLAG=-m64
  endif
endif

UNAME := $(shell uname)

ifeq ($(UNAME), Linux)
PLATFORM=linux
PLATFORMSHORT=unx
PLATFORMLIB=$(X11LIB) -lGLU -lGL
APPDIR=.
APPDIRSIGNATURE=
APPDIRSIGNATURERULE=dummyRule
OBJSIMPLEWIN=$(OBJDIR)/fsglxwrapper.o $(OBJDIR)/fsglxkeymap.o
endif

ifeq ($(UNAME), Darwin)
PLATFORM=macosx
PLATFORMSHORT=mac
PLATFORMLIB=-framework Cocoa -framework OpenGL
APPDIR=$(PROJECTNAME).app/Contents/MacOS
APPDIRSIGNATURE=$(APPDIR)/signature
APPDIRSIGNATURERULE=$(APPDIRSIGNATURE)
OBJSIMPLEWIN=$(OBJDIR)/fsmacosxwrapperobjc.o $(OBJDIR)/fsmacosxwrappercpp.o
ifeq ($(IS_LIBRARY_PROJECT),0)
MAKEBUNDLEDIR:=$(shell mkdir -p $(APPDIR))
endif
endif

ifndef YSBIN_ROOT
YSBIN_ROOT=$(HOME)/ysbin
endif

YSOBJ_ROOT=$(YSBIN_ROOT)/$(PLATFORM)$(YS_BITNESS)/obj
USERLIBDIR=$(YSBIN_ROOT)/$(PLATFORM)$(YS_BITNESS)/lib

OBJDIR=$(YSOBJ_ROOT)/$(PROJECTNAME)
LIBDIR=$(USERLIBDIR)
BINDIR=./bin/$(PLATFORM)$(YS_BITNESS)
MAKEFILE=$(lastword $(MAKEFILE_LIST))
#
# YS Standard Makefile Header for Unix and MacOSX <<
# }



APPTARGET=$(APPDIR)/$(PROJECTNAME)
LIBTARGET=$(USERLIBDIR)/lib$(PROJECTNAME).a

ifeq ($(IS_LIBRARY_PROJECT),0)
  TARGET=$(APPTARGET)
else
  TARGET=$(LIBTARGET)
endif



# ADDITIONAL_INCLUDE_PATH, ADDITIONAL_LIBRARIES, and NOT_ADDED_TO_ADDITIONAL_LIBRARIES will be updated from YS makefile management tools.
ADDITIONAL_INCLUDE_PATH=

ADDITIONAL_LIBRARIES=

NOT_ADDED_TO_ADDITIONAL_LIBRARIES=

# UNMANAGED_INCLUDE_PATH and UNMANAGED_LIBRARIES won't be updated from YS makefile management tools. These should be manually maintained.
UNMANAGED_INCLUDE_PATH=

UNMANAGED_LIBRARIES=


CFLAGS=-O3 $(CBITNESSFLAG) $(ADDITIONAL_INCLUDE_PATH) $(UNMANAGED_INCLUDE_PATH) -c

LFLAGS=$(CBITNESSFLAG) $(UNMANAGED_LIBRARIES) $(ADDITIONAL_LIBRARIES)

OBJS= $(OBJDIR)/main.o $(OBJDIR)/fssimplewindowcommon.o $(OBJDIR)/fswin32keymap.o $(OBJDIR)/fswin32winmain.o $(OBJDIR)/fswin32wrapper.o $(OBJDIR)/Cylinder.o $(OBJDIR)/Particle.o $(OBJDIR)/ParticleSimulation.o $(OBJDIR)/SmoothingKernel.o $(OBJDIR)/Gradation.o

LIBS=

all : dependencies $(TARGET)

targetonly : $(TARGET)

dependencies :

clean_dependencies :

clean_self :
	rm -f $(OBJS)
	rm -f $(TARGET)

cln : clean_dependencies clean_self

clnlight : clean_self


# Also can be written like:
#	cd $(depending library project directory) ; make -f makefile.unx
# However, if there is a misspelling in the directory name, it causes an infinite recursion.


run:
	make -f makefile.unx
	$(TARGET)

$(LIBTARGET) : $(OBJDIR)/signature $(LIBDIR)/signature $(HEADERS) $(OBJS)
	ar cru $(LIBTARGET) $(OBJS)
	ranlib $(LIBTARGET)

$(APPTARGET) : $(OBJDIR)/signature $(APPDIRSIGNATURE) $(OBJS) $(LIBS) $(UNMANAGED_LIBRARIES) $(ADDITIONAL_LIBRARIES)
	$(CC) -o $(APPTARGET) $(OBJS) $(LIBS) $(LFLAGS)

rebuild :
	$(MAKE) -f makefile.unx cln
	$(MAKE) -f makefile.unx cln $(TARGET)

$(OBJDIR)/signature :
	mkdir -p $(OBJDIR)
	echo signature > $@

$(LIBDIR)/signature :
	mkdir -p $(LIBDIR)
	echo signature > $@

$(APPDIRSIGNATURERULE) :
	mkdir -p $(APPDIR)
	echo signature > $@

$(OBJDIR)/main.o : main.cpp
	$(CC) main.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/main.o

$(OBJDIR)/fssimplewindowcommon.o : ../fssimplewindow/fssimplewindowcommon.cpp
	$(CC) ../fssimplewindow/fssimplewindowcommon.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/fssimplewindowcommon.o

$(OBJDIR)/fswin32keymap.o : ../fssimplewindow/windows/fswin32keymap.cpp
	$(CC) ../fssimplewindow/windows/fswin32keymap.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/fswin32keymap.o

$(OBJDIR)/fswin32winmain.o : ../fssimplewindow/windows/fswin32winmain.cpp
	$(CC) ../fssimplewindow/windows/fswin32winmain.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/fswin32winmain.o

$(OBJDIR)/fswin32wrapper.o : ../fssimplewindow/windows/fswin32wrapper.cpp
	$(CC) ../fssimplewindow/windows/fswin32wrapper.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/fswin32wrapper.o

$(OBJDIR)/Cylinder.o : ../MCG03/Cylinder.cpp
	$(CC) ../MCG03/Cylinder.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/Cylinder.o

$(OBJDIR)/Particle.o : ../MCG03/Particle.cpp
	$(CC) ../MCG03/Particle.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/Particle.o

$(OBJDIR)/ParticleSimulation.o : ../MCG03/ParticleSimulation.cpp
	$(CC) ../MCG03/ParticleSimulation.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/ParticleSimulation.o

$(OBJDIR)/SmoothingKernel.o : ../MCG03/SmoothingKernel.cpp
	$(CC) ../MCG03/SmoothingKernel.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/SmoothingKernel.o

$(OBJDIR)/Gradation.o : ../MCG03/Gradation.cpp
	$(CC) ../MCG03/Gradation.cpp $(CPPFLAGS) $(CFLAGS) -o $(OBJDIR)/Gradation.o
